{
  "entryNodeId": "location-node",
  "nodes": [
    {
      "nodeId": "location-node",
      "description": "Retrieve and generate a comprehensive, concise, and fully verified list of all unique store locations for a specified brand and city, ensuring completeness by including every known store with essential data such as name and full, verifiable address only, to meet user requests accurately and efficiently. Confirm and clearly state the exact total number of unique stores to avoid processing failures and improve response relevance. Enhance data validation to eliminate incomplete or placeholder location entries and resolve all warnings before output. Prioritize delivering exact, verifiable store addresses over internal processing summaries to align with user focus. Optimize processing time to improve response speed and reduce delays, enhancing user experience.",
      "modelName": "openai/gpt-4.1-mini",
      "mcpTools": [],
      "codeTools": ["searchGoogleMaps", "locationDataManager"],
      "handOffs": ["location-data-info-node"],
      "memory": {}
    },
    {
      "nodeId": "location-data-info-node",
      "description": "Verify and comprehensively summarize location data from the location-node, including total counts, uniqueness of addresses, quality statistics, completeness metrics, and detailed warnings or anomalies to meet user expectations for accuracy and completeness. Provide concise and direct summaries that explicitly state expected counts and uniqueness to improve clarity and efficiency. Ensure actual unique addresses are used instead of placeholders to improve data quality. Optimize response time to better match task simplicity.",
      "modelName": "openai/gpt-4.1-mini",
      "mcpTools": [],
      "codeTools": ["locationDataInfo"],
      "handOffs": ["end"],
      "memory": {}
    },
    {
      "nodeId": "check-if-we-met-the-goal-node",
      "description": "Check if we met the goal of the workflow. If you're not sure, run one more time to be sure.",
      "modelName": "openai/gpt-4.1-mini",
      "mcpTools": [],
      "codeTools": [],
      "handOffs": ["end", "location-node"],
      "memory": {}
    }
  ]
}
