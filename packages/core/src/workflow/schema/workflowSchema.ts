import { z } from "zod"

import { agentDescriptionsWithTools } from "@/node/schemas/agentWithTools"
import { MemorySchemaOptional } from "@/node/schemas/memorySchema"
import { ACTIVE_MODEL_NAMES } from "@/utils/spending/pricing"
import { withDescriptions } from "@/utils/zod/withDescriptions"
import type {
  ModelName,
  WorkflowConfig,
  WorkflowNodeConfig,
} from "@/workflow/schema/workflow.types"
import { MODELS } from "@/runtime/settings/constants"
import {
  ACTIVE_CODE_TOOL_NAMES_WITH_DEFAULT,
  ACTIVE_MCP_TOOL_NAMES,
} from "@tools/tool.types"

export const WorkflowNodeConfigSchema = z.object({
  nodeId: z.string(),
  description: z.string(),
  systemPrompt: z.string(),
  modelName: z.enum(ACTIVE_MODEL_NAMES),
  mcpTools: z.array(z.enum(ACTIVE_MCP_TOOL_NAMES)),
  codeTools: z.array(z.enum(ACTIVE_CODE_TOOL_NAMES_WITH_DEFAULT)),
  handOffs: z.array(z.string()),
  memory: MemorySchemaOptional,
})

export const WorkflowConfigSchema = z.object({
  nodes: z.array(WorkflowNodeConfigSchema),
  entryNodeId: z.string(),
  contextFile: z.string().nullish(),
  memory: MemorySchemaOptional,
})

// Display-only schema that allows any model name for legacy workflows
export const WorkflowNodeConfigSchemaDisplay = z.object({
  nodeId: z.string(),
  description: z.string(),
  systemPrompt: z.string(),
  modelName: z.string(), // Allow any string for display
  mcpTools: z.array(z.string()), // Allow any string for legacy tools
  codeTools: z.array(z.string()), // Allow any string for legacy tools
  handOffs: z.array(z.string()),
  memory: MemorySchemaOptional,
})

export const WorkflowConfigSchemaDisplay = z.object({
  nodes: z.array(WorkflowNodeConfigSchemaDisplay),
  entryNodeId: z.string(),
  contextFile: z.string().nullish(),
  memory: MemorySchemaOptional,
})

const modelNames = ["low", "medium", "high"] as const

export const WorkflowNodeConfigSchemaEasy = z.object({
  nodeId: z.string(),
  description: z.string(),
  systemPrompt: z.string(),
  modelName: z.enum(modelNames),
  mcpTools: z.array(z.enum(ACTIVE_MCP_TOOL_NAMES)),
  codeTools: z.array(z.enum(ACTIVE_CODE_TOOL_NAMES_WITH_DEFAULT)),
  handOffs: z.array(z.string()),
})

export const WorkflowConfigSchemaEasy = z.object({
  nodes: z.array(
    withDescriptions(
      WorkflowNodeConfigSchemaEasy.shape,
      agentDescriptionsWithTools
    )
  ),
  entryNodeId: z.string(),
})

// adds memory and other fields that were just generated by the easy workflow generator
export const handleWorkflowCompletion = (
  oldWorkflow: WorkflowConfig | null,
  newWorkflow: z.infer<typeof WorkflowConfigSchemaEasy>
): WorkflowConfig => {
  const handledNodes: WorkflowNodeConfig[] = (newWorkflow.nodes ?? []).map(
    (partialNode) => {
      const oldNode = oldWorkflow?.nodes?.find(
        (n) => n.nodeId === partialNode.nodeId
      )
      const modelName: ModelName =
        partialNode.modelName === "medium"
          ? MODELS.medium
          : partialNode.modelName === "high"
            ? MODELS.high
            : MODELS.default

      const fullNode = { ...partialNode, modelName }
      return oldNode ? { ...oldNode, ...fullNode } : fullNode
    }
  )

  return {
    ...newWorkflow,
    nodes: handledNodes, // overrides the spread-in value safely
  }
}
